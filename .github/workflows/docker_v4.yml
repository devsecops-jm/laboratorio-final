name: Docker CI/CD v4

on:
  push:
    branches:
      - feature-jm-sysadm #main
      #- '**'
jobs:
        
    # build-and-push-public-ecr:
    #   needs: DockerBuild #DockerScan
    #   runs-on: ubuntu-latest
      
    #   steps:

    #     - name: Checkout code
    #       uses: actions/checkout@v4
    #       with:
    #           fetch-depth: 0

    #     - name: Docker Login
    #       uses: docker/login-action@v3
    #       with:
    #         username: ${{ secrets.DOCKER_USER }}
    #         password: ${{ secrets.DOCKER_PASSWORD }}

    #     - name: Login AWS
    #       uses: aws-actions/configure-aws-credentials@v4
    #       with:
    #         aws-access-key-id: ${{ secrets.ACCESS_KEY }}
    #         aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
    #         aws-region: ${{ secrets.REGION }}

    #     - name: Login AWSECR
    #       uses: docker/login-action@v3
    #       with:
    #         registry: public.ecr.aws
    #         username: ${{ secrets.ACCESS_KEY }}
    #         password: ${{ secrets.SECRET_ACCESS_KEY }}
    #       env:
    #         aws-region: ${{ secrets.REGION }}

    #     # Agregar lógica para evaluar si el docker está en running y eliminarlo antes de desplegar una nueva versión
    #     - name: Build && Push Image to public ECR
    #       run: |
    #         docker build -t devsecops-jm/lab4-deploy .
    #         docker tag devsecops-jm/lab4-deploy:latest public.ecr.aws/f7f8x2e4/devsecops-jm/lab4-deploy:$GITHUB_RUN_ID
    #         docker push public.ecr.aws/f7f8x2e4/devsecops-jm/lab4-deploy:$GITHUB_RUN_ID

    build-and-push-private-ecr:
      #needs: DockerBuild #build-and-push-public-ecr #DockerScan
      runs-on: ubuntu-latest
      steps:

        - name: Checkout code
          uses: actions/checkout@v4
          with:
              fetch-depth: 0

        # - name: Docker Login
        #   uses: docker/login-action@v3
        #   with:
        #     username: ${{ secrets.DOCKER_USER }}
        #     password: ${{ secrets.DOCKER_PASSWORD }}

        - name: Login AWS
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.REGION }}

        - name: Login AWS-ECR
          uses: docker/login-action@v3
          with:
            registry: 863190499580.dkr.ecr.us-east-1.amazonaws.com
            username: ${{ secrets.ACCESS_KEY }}
            password: ${{ secrets.SECRET_ACCESS_KEY }}
          env:
            aws-region: ${{ secrets.REGION }}

        # Agregar lógica para evaluar si el docker está en running y eliminarlo antes de desplegar una nueva versión
        - name: Build && Push Image to private ECR 
          env: 
            REGISTRY: 863190499580.dkr.ecr.us-east-1.amazonaws.com
            REPO: devsecops-jm/lab4-deploy
            #repo_tag: ${registry}/${repo}:${GITHUB_RUN_NUMBER}
          run: |
            docker build -t ${REPO} .
            docker tag ${REPO}:latest ${REGISTRY}/${REPO}:${GITHUB_RUN_NUMBER}
            docker push ${REGISTRY}/${REPO}:${GITHUB_RUN_NUMBER}

    install_kubectl:
      needs: build-and-push-private-ecr
      runs-on: ubuntu-latest
      steps:

        - name: install_kubectl
          run: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
            echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client

#----------------------------------------------->

    deployToCluster:
      needs: install_kubectl
      runs-on: ubuntu-latest
      steps:

        - name: Checkout code
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Login AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.REGION }}

        - name: Download Kube File
          env:
            KUBECONFIG: ${{ runner.temp }}/kubeconfig
          run: |
            aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.REGION }} --kubeconfig ${KUBECONFIG}
            echo "KUBECONFIG=${KUBECONFIG}" >> $GITHUB_ENV

        - name: Deploy to EKS
          env: 
            REGISTRY: 863190499580.dkr.ecr.us-east-1.amazonaws.com
            REPO: devsecops-jm/lab4-deploy
          run: |
            sed -i "s|image: REPOSITORY_TAG|image: 863190499580.dkr.ecr.us-east-1.amazonaws.com/devsecops-jm/lab4-deploy:$GITHUB_RUN_NUMBER|g" ./deployment.yml
            cat ./deployment.yml
            kubectl apply -f ./deployment.yml