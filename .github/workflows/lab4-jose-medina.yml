name: DevSecOps-jm-sysadm

on:
  push:
    branches:
      - none # feature-jm-sysadm # main
      #- '**'
jobs:

  SAST:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SATS - Set Environment Variables
        run: |
          echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "ORG_NAME=devsecops-jm" >> $GITHUB_ENV

      - name: Validate SonarCloud Project
        id: eval-sonarcloud
        env:
          DSO_TK_SONARCLOUD: ${{ secrets.SONAR_TOKEN}}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          echo "Verificando si el proyecto $REPO_NAME existe en SonarCloud..."
          response=$(curl -s -o /dev/null -w "%{http_code}" -u "$DSO_TK_SONARCLOUD:" \
            "https://sonarcloud.io/api/projects/search?projects=$REPO_NAME")

          if [ "$response" -ne 200 ]; then
            echo "El proyecto no existe. Creándolo en SonarCloud..."
            create_response=$(curl -s -w "%{http_code}" -o /dev/null -X POST -u "$DSO_TK_SONARCLOUD:" \
              "https://sonarcloud.io/api/projects/create" \
              -d "name=$REPO_NAME" \
              -d "project=$REPO_NAME" \
              -d "organization=$ORG_NAME" \
              -d "visibility=public")

            if [ "$create_response" -ne 201 ]; then
              echo "Proyecto creado exitosamente (HTTP Response: $create_response)."
            fi

            echo "Estableciendo la rama [$BRANCH_NAME] como predeterminada..."
            curl -s -f -X POST -u "$DSO_TK_SONARCLOUD:" \
              "https://sonarcloud.io/api/project_branches/rename" \
              -d "name=$BRANCH_NAME" \
              -d "project=$REPO_NAME"

            echo "project_created=true" >> $GITHUB_ENV
          else
            echo "El proyecto ya existe en SonarCloud."
            echo "project_created=false" >> $GITHUB_ENV
          fi

      - name: Perform Initial Analysis (if Project Created)
        if: env.project_created == 'true'
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          DSO_TK_SONARCLOUD: ${{ secrets.SONAR_TOKEN }}
          REPO_NAME: ${{ github.event.repository.name }}
          BRANCH_NAME: ${{ github.ref_name }}
        with:
            args:
              -Dsonar.projectKey=$REPO_NAME
              -Dsonar.organization=$ORG_NAME
              -Dsonar.host.url=https://sonarcloud.io
              -Dsonar.token=$DSO_TK_SONARCLOUD
              -Dsonar.branch.name=$BRANCH_NAME
            projectBaseDir: .

      - name: Perform Branch Analysis
        if: env.project_created == 'false'
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          DSO_TK_SONARCLOUD: ${{ secrets.SONAR_TOKEN}}
          REPO_NAME: ${{ github.event.repository.name }}
          BRANCH_NAME: ${{ github.ref_name }}        
        with:
            args:
              -Dsonar.projectKey="$REPO_NAME"
              -Dsonar.organization="$ORG_NAME"
              -Dsonar.host.url="https://sonarcloud.io"
              -Dsonar.token="$DSO_TK_SONARCLOUD"
              -Dsonar.branch.name="$BRANCH_NAME"
            projectBaseDir: .

      - name: Quality Gate
        env:
          DSO_TK_SONARCLOUD: ${{ secrets.SONAR_TOKEN}}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          echo "Validando el estado del Quality Gate..."
          analysisId=$(curl -s -u "$DSO_TK_SONARCLOUD:" \
            "https://sonarcloud.io/api/ce/component?component=$REPO_NAME" | jq -r '.current.analysisId')

          qualityGateStatus=$(curl -s -u "$DSO_TK_SONARCLOUD:" \
            "https://sonarcloud.io/api/qualitygates/project_status?analysisId=$analysisId" | jq -r '.projectStatus.status')

          if [ "$qualityGateStatus" == "NONE" ]; then
            echo "El proyecto no cumple con el Quality Gate, status: $qualityGateStatus es parte de la capa gratuita"
            exit 0 # exit 1
          fi
            echo "El proyecto no cumple con el Quality Gate: $qualityGateStatus."
          if [ "$qualityGateStatus" != "OK" ]; then
            echo "El proyecto no cumple con el Quality Gate: $qualityGateStatus."
            echo "Verificando vulnerabilidades críticas..."
            vulnerabilities=$(curl -s -u "$DSO_TK_SONARCLOUD:" \
              "https://sonarcloud.io/api/issues/search?componentKeys=$REPO_NAME&types=VULNERABILITY&severities=CRITICAL,BLOCKER" | jq -r '.total')

            if [ "$vulnerabilities" -gt 0 ]; then
              echo "Se encontraron $vulnerabilities vulnerabilidades críticas. El proyecto no cumple con los estándares de seguridad."
              exit 1
            fi
          fi

          echo "El proyecto cumple con el Quality Gate y no tiene vulnerabilidades críticas. Continuando sin problemas."

  SCA:
    needs: SAST
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Install Dependency project with NPM
        run: npm install

      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: '${{ github.event.repository.name }}'
          path: '.'
          format: 'HTML'
          out: '.' 
          args: > # --failOnCVSS 4
            --enableRetired
            
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: Depcheck report
           path: ${{github.workspace}}/reports    
  
  DockerBuild:
    needs: SCA
    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v4
      with:
          fetch-depth: 0
      
    - name: Docker Login
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Docker Build
      run: |
        docker build --tag jmsysadm/nodejs .

    - name: Push Docker
      run: |
        docker push jmsysadm/nodejs 

  DockerScan:
    needs: DockerBuild
    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Docker Login
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Pull Docker
      run: |
        docker pull jmsysadm/nodejs

    - name: Run Trivy vulnerability scanner - Format Table Report
      uses: aquasecurity/trivy-action@master
      id: TrivyScanReport
      with:
        scan-type: "image"
        format: 'table'
        image-ref: 'jmsysadm/nodejs'
        #output: 'trivy-results.sarif'
        severity: HIGH,CRITICAL
        ignore-unfixed: true
        exit-code:  0 #1

    - name: Validar Ubicación de reporte
      run: |
        if [ -f "trivy-results.sarif" ]; then
          echo "Reporte trivy scan existente"
          echo "Activando full privilegios sobre el reporte"
          chmod 777 trivy-results.sarif
        else 
          echo "No se encuentra el reporte"
        fi

    # - name: Upload Test results
    #   uses: actions/upload-artifact@master
    #   with:
    #     name: TrivyScanReport
    #     path: ${{github.workspace}}/trivy-results.sarif

  Deploy:
    needs: DockerScan
    runs-on: ubuntu-latest
    steps:
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Deploy Docker Image
        run: |
          docker run -d jmsysadm/nodejs -p 3000:3000